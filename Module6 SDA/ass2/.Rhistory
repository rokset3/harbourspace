days_count = rep(0, length(unique(data$Day)))
library(lattice)
library(MASS)
library(sandwich)
library(mvtnorm)
library(car)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(GGally)
library(comprehenr)
theme_set(theme_bw())
setwd('C:\\Users\\Temirlan\\Desktop\\HarbourSpace\\Module6 SDA\\ass2')
data<-read.csv('FlightDelays.csv')
head(data,10)
data<-subset(data, select=-c(ID, FlightNo))
data %>%
ggpairs(mapping = aes(alpha=0.5, fill='red'))
Delayed_FlightLen <- (data%>%filter(Delayed30=="Yes"))$FlightLength
NotDelayed_FlightLen <- (data%>%filter(Delayed30=="No"))$FlightLength
hyp1<-t.test(Delayed_FlightLen, NotDelayed_FlightLen)
hyp1
AA_FlightLen <- (data%>%filter(Carrier=="AA"))$FlightLength
UA_FlightLen <- (data%>%filter(Carrier=="UA"))$FlightLength
hyp2<-t.test(AA_FlightLen, UA_FlightLen)
hyp2
num_flights_aa <- as.numeric(count(data%>%filter(Carrier=="AA")))
num_flights_ua <- as.numeric(count(data%>%filter(Carrier=="UA")))
num_del_flights_aa<- as.numeric(count(data%>%filter(Carrier=="AA",
Delayed30=="Yes")))
num_del_flights_ua<- as.numeric(count(data%>%filter(Carrier=="UA",
Delayed30=="Yes")))
hyp3<-prop.test(x=c(num_del_flights_aa, num_del_flights_ua),
n=c(num_flights_aa, num_flights_ua))
hyp3
days_count = rep(0, length(unique(data$Day)))
days_delayed = rep(0, length(unique(data$Day)))
idx=1
for (day in unique(data$Day)){
days_count[idx]<-as.numeric(count(data%>%filter(Day==day)))
days_delayed[idx]<-as.numeric(count(data%>%filter(Day==day,
Delayed30=="Yes")))
idx <- idx + 1
}
for (day in unique(data$Day)){
days_count[idx]<-as.numeric(count(data%>%filter(Day==day)))
days_delayed[idx]<-as.numeric(count(data%>%filter(Day==day,
Delayed30=="Yes")))
idx <- idx + 1
}
hyp4<-prop.test(x=days_delayed,
n=days_count)
hyp4<-prop.test(x=days_delayed,
n=days_count)
names(hyp4$estimate)<- to_list(for(day in unique(data$Day))day)
hyp4
days_count = rep(0, length(unique(data$Day)))
days_delayed = rep(0, length(unique(data$Day)))
idx=1
for (day in unique(data$Day)){
days_count[idx]<-as.numeric(count(data%>%filter(Day==day)))
days_delayed[idx]<-as.numeric(count(data%>%filter(Day==day,
Delayed30=="Yes")))
idx <- idx + 1
}
for (day in unique(data$Day)){
days_count[idx]<-as.numeric(count(data%>%filter(Day==day)))
days_delayed[idx]<-as.numeric(count(data%>%filter(Day==day,
Delayed30=="Yes")))
idx <- idx + 1
}
hyp4<-prop.test(x=days_delayed,
n=days_count)
hyp4<-prop.test(x=days_delayed,
n=days_count)
names(hyp4$estimate)<- to_list(for(day in unique(data$Day))day)
hyp4
days_count = rep(0, length(unique(data$Day)))
days_delayed = rep(0, length(unique(data$Day)))
idx=1
for (day in unique(data$Day)){
days_count[idx]<-as.numeric(count(filter(data,Day==day)))
days_delayed[idx]<-as.numeric(count(data%>%filter(Day==day,
Delayed30=="Yes")))
idx <- idx + 1
}
days_count = rep(0, length(unique(data$Day)))
days_delayed = rep(0, length(unique(data$Day)))
idx=1
for (day in unique(data$Day)){
days_count[idx]<-as.numeric(count(data%>%filter(Day==day)))
days_delayed[idx]<-as.numeric(count(data%>%filter(Day==day,
Delayed30=="Yes")))
idx <- idx + 1
}
for (day in unique(data$Day)){
days_count[idx]<-as.numeric(count(data%>%filter(Day==day)))
days_delayed[idx]<-as.numeric(count(data%>%filter(Day==day,
Delayed30=="Yes")))
idx <- idx + 1
}
hyp4<-prop.test(x=days_delayed,
n=days_count)
names(hyp4$estimate)<- to_list(for(day in unique(data$Day))day)
hyp4
days_delayed
days_count = rep(0, length(unique(data$Day)))
days_delayed = rep(0, length(unique(data$Day)))
idx=1
for (day in unique(data$Day)){
days_count[idx]<-as.numeric(count(data%>%filter(Day==day)))
days_delayed[idx]<-as.numeric(count(data%>%filter(Day==day,
Delayed30=="Yes")))
idx <- idx + 1
}
hyp4<-prop.test(x=days_delayed,
n=days_count)
hyp4
names(hyp4$estimate)<- to_list(for(day in unique(data$Day))day)
hyp4
dep_time_count = rep(0, length(unique(data$DepartTime)))
days_delayed = rep(0, length(unique(data$DepartTime)))
idx=1
data$DepartTime
dep_time_count[idx]<-as.numeric(count(filter(data,DepartTime==DepTime)))
for (DepTime in unique(data$DepartTime)){
dep_time_count[idx]<-as.numeric(count(filter(data,DepartTime==DepTime)))
days_delayed[idx]<-as.numeric(count(data%>%filter(DepartTime==DepTime,
Delayed30=="Yes")))
idx <- idx + 1
}
hyp5<-prop.test(x=days_delayed,
n=dep_time_count)
names(hyp4$estimate)<- to_list(for(DepTime in unique(data$DepartTime))day)
hyp4
hyp5
days_count = rep(0, length(unique(data$Day)))
days_delayed = rep(0, length(unique(data$Day)))
idx=1
for (day in unique(data$Day)){
days_count[idx]<-as.numeric(count(data%>%filter(Day==day)))
days_delayed[idx]<-as.numeric(count(data%>%filter(Day==day,
Delayed30=="Yes")))
idx <- idx + 1
}
hyp4<-prop.test(x=days_delayed,
n=days_count)
names(hyp4$estimate)<- to_list(for(day in unique(data$Day))day)
hyp4
dep_time_count = rep(0, length(unique(data$DepartTime)))
days_delayed = rep(0, length(unique(data$DepartTime)))
idx=1
for (DepTime in unique(data$DepartTime)){
dep_time_count[idx]<-as.numeric(count(filter(data,DepartTime==DepTime)))
days_delayed[idx]<-as.numeric(count(data%>%filter(DepartTime==DepTime,
Delayed30=="Yes")))
idx <- idx + 1
}
hyp5<-prop.test(x=days_delayed,
n=dep_time_count)
names(hyp5$estimate)<- to_list(for(DepTime in unique(data$DepartTime))day)
hyp5
dep_time_count = rep(0, length(unique(data$DepartTime)))
days_delayed = rep(0, length(unique(data$DepartTime)))
idx=1
for (DepTime in unique(data$DepartTime)){
dep_time_count[idx]<-as.numeric(count(filter(data,DepartTime==DepTime)))
days_delayed[idx]<-as.numeric(count(data%>%filter(DepartTime==DepTime,
Delayed30=="Yes")))
idx <- idx + 1
}
hyp5<-prop.test(x=days_delayed,
n=dep_time_count)
names(hyp5$estimate)<- to_list(for(DepTime in unique(data$DepartTime))DepartTime)
to_list(for(DepTime in unique(data$DepartTime))day)
to_list(for(DepTime in unique(data$DepartTime)))
to_list(for(DepTime in unique(data$DepartTime)))
to_list(for(DepTime in unique(data$DepartTime))day)
(for(DepTime in unique(data$DepartTime))
(for(DepTime in unique(data$DepartTime))
names(hyp$estimate)<- to_list(for(DepTime in unique(data$DepartTime))DepTime)
hyp5
dep_time_count = rep(0, length(unique(data$DepartTime)))
days_delayed = rep(0, length(unique(data$DepartTime)))
idx=1
for (DepTime in unique(data$DepartTime)){
dep_time_count[idx]<-as.numeric(count(filter(data,DepartTime==DepTime)))
days_delayed[idx]<-as.numeric(count(data%>%filter(DepartTime==DepTime,
Delayed30=="Yes")))
idx <- idx + 1
}
hyp5<-prop.test(x=days_delayed,
n=dep_time_count)
names(hyp$estimate)<- to_list(for(DepTime in unique(data$DepartTime))DepTime)
dep_time_count = rep(0, length(unique(data$DepartTime)))
days_delayed = rep(0, length(unique(data$DepartTime)))
idx=1
for (DepTime in unique(data$DepartTime)){
dep_time_count[idx]<-as.numeric(count(filter(data,DepartTime==DepTime)))
days_delayed[idx]<-as.numeric(count(data%>%filter(DepartTime==DepTime,
Delayed30=="Yes")))
idx <- idx + 1
}
hyp5<-prop.test(x=days_delayed,
n=dep_time_count)
names(hyp5$estimate)<- to_list(for(DepTime in unique(data$DepartTime))DepTime)
hyp5
library(lubridate)
install.packages("lubridate")
library(lubridate)
library(forecast)
library(tseries)
library(lmtest)
library(Hmisc)
library(lubridate)
setwd('C:\\Users\\Temirlan\\Desktop\\HarbourSpace\\Module6 SDA\\ass4')
data <- read.csv("Electric_Production.csv", sep=",", stringsAsFactors=F)
names(data)[1] <- "Date"
names(data)[2] <- "Value"
xname <- "Monthly electricity production"
data$Value <- as.numeric(data$Value)
data$Date <- as.Date(as.character(data$Date), format = "%m/%d/%Y")
tSeries <- ts(data = data$Value, start = as.numeric(c(format(data$Date[1], "%Y"), format(data$Date[1], "%m"))), freq = 12)
plot(tSeries, type="l", ylab=xname, col="red")
grid()
D<-39
plot(stl(tSeries, s.window="periodic"))
par(mfrow=c(2,1))
plot(tSeries, ylab="Original series", xlab="", col="red")
grid()
LambdaOpt <- BoxCox.lambda(tSeries)
plot(BoxCox(tSeries, LambdaOpt), ylab="Transformed series", xlab="", col="red")
title(main=toString(round(LambdaOpt, 3)))
grid()
fit.auto <- auto.arima(tSeries, lambda=LambdaOpt, biasadj=T)
fit.auto
res.auto <- residuals(fit.auto)
plot(res.auto)
res.auto <- res.auto[-c(1:12)]
tsdisplay(res.auto)
p <- rep(0, 1, frequency(tSeries)*3)
for (i in 1:length(p)){
p[i] <- Box.test(res.auto, lag=i, type = "Ljung-Box")$p.value
}
plot(p, xlab="Lag", ylab="p-values", ylim=c(0,1), main="Ljung-Box test")
abline(h = 0.05, lty = 2, col = "blue")
par(mfrow=c(1,2))
qqnorm(res.auto)
qqline(res.auto, col="red")
hist(res.auto)
plot(diff(BoxCox(tSeries, LambdaOpt), 12), type="l", col="red")
grid()
plot(diff(diff(BoxCox(tSeries, LambdaOpt), 12), 1), type="l", col="red")
grid()
par(mfrow=c(1,2))
acf(diff(diff(BoxCox(tSeries, LambdaOpt), 12), 1), lag.max=5*12, main="")
pacf(diff(diff(BoxCox(tSeries, LambdaOpt), 12), 1), lag.max=5*12, main="")
fit <- auto.arima(tSeries, d=1, D=1, max.p=10, max.q=11, max.P = 4, max.Q = 4,
start.p=2, start.q=1, start.P=2, start.Q=1,
lambda=LambdaOpt, biasadj=T)
fit
res <- residuals(fit)
plot(res)
res <- res[-c(1:12)]
tsdisplay(res)
p <- rep(0, 1, frequency(tSeries)*3)
for (i in 1:length(p)){
p[i] <- Box.test(res, lag=i, type = "Ljung-Box")$p.value
}
plot(p, xlab="Lag", ylab="p-values", ylim=c(0,1), main="Ljung-Box test")
abline(h = 0.05, lty = 2, col = "blue")
par(mfrow=c(1,2))
qqnorm(res)
qqline(res, col="red")
hist(res)
res_manual_orig_scale <- residuals(fit, type = "response")[-c(1:12)]
res_auto_orig_scale <- residuals(fit.auto, type = "response")[-c(1:12)]
ax_range <- range(c(res_manual_orig_scale, res_auto_orig_scale))
plot(res_manual_orig_scale, res_auto_orig_scale, xlim=ax_range, ylim=ax_range,
xlab = "Residuals of manually found model", ylab="Residuals of auto.arima model")
grid()
lines(c(ax_range[1], ax_range[2])*2, c(ax_range[1], ax_range[2])*2, col="red")
fit.ets <- ets(tSeries, lambda=LambdaOpt, biasadj = T)
print(fit.ets)
tsdisplay(residuals(fit.ets))
p <- rep(0, 1, frequency(tSeries)*3)
for (i in 1:length(p)){
p[i] <- Box.test(residuals(fit.ets), lag=i, type = "Ljung-Box")$p.value
}
plot(p, xlab="Lag", ylab="p-values", ylim=c(0,1), main="Ljung-Box test")
abline(h = 0.05, lty = 2, col = "blue")
par(mfrow=c(1,2))
qqnorm(residuals(fit.ets))
qqline(residuals(fit.ets), col="red")
hist(residuals(fit.ets))
shapiro.test(residuals(fit.ets))$p.value
wilcox.test(residuals(fit.ets))$p.value
kpss.test(residuals(fit.ets))$p.value
kpss.test(residuals(fit.ets))
library(forecast)
library(tseries)
library(lmtest)
library(Hmisc)
library(lubridate)
setwd('C:\\Users\\Temirlan\\Desktop\\HarbourSpace\\Module6 SDA\\ass4')
data <- read.csv("Electric_Production.csv", sep=",", stringsAsFactors=F)
names(data)[1] <- "Date"
names(data)[2] <- "Value"
xname <- "Monthly electricity production"
data$Value <- as.numeric(data$Value)
data$Date <- as.Date(as.character(data$Date), format = "%m/%d/%Y")
tSeries <- ts(data = data$Value, start = as.numeric(c(format(data$Date[1], "%Y"), format(data$Date[1], "%m"))), freq = 12)
plot(tSeries, type="l", ylab=xname, col="red")
grid()
D<-39
trainSeries <- window(tSeries, end  =c(year(data$Date[length(data$Date)-D]),  month(data$Date[length(data$Date)-D])))
testSeries  <- window(tSeries, start=c(year(data$Date[length(data$Date)-D+1]),month(data$Date[length(data$Date)-D+1])))
fitShort <- Arima(trainSeries, order=c(2,1,1), seasonal=c(2,1,1), lambda=LambdaOpt, biasadj = T)
fc       <- forecast(fitShort, h=D)
accuracy(fc, testSeries)
fitShort <- ets(trainSeries, model="AAA", damped=F, lambda=LambdaOpt, biasadj = T)
fc       <- forecast(fitShort, h=D)
accuracy(fc, testSeries)
plot(forecast(fitShort, h=D), ylab=xname, xlab="Year")
lines(tSeries, col="red")
library(forecast)
library(tseries)
library(lmtest)
library(Hmisc)
library(lubridate)
setwd('C:\\Users\\Temirlan\\Desktop\\HarbourSpace\\Module6 SDA\\ass4')
data <- read.csv("Electric_Production.csv", sep=",", stringsAsFactors=F)
names(data)[1] <- "Date"
names(data)[2] <- "Value"
xname <- "Monthly electricity production"
data$Value <- as.numeric(data$Value)
data$Date <- as.Date(as.character(data$Date), format = "%m/%d/%Y")
tSeries <- ts(data = data$Value, start = as.numeric(c(format(data$Date[1], "%Y"), format(data$Date[1], "%m"))), freq = 12)
plot(tSeries, type="l", ylab=xname, col="red")
grid()
D<-39
trainSeries <- window(tSeries, end  =c(year(data$Date[length(data$Date)-D]),  month(data$Date[length(data$Date)-D])))
testSeries  <- window(tSeries, start=c(year(data$Date[length(data$Date)-D+1]),month(data$Date[length(data$Date)-D+1])))
plot(stl(tSeries, s.window="periodic"))
par(mfrow=c(2,1))
plot(tSeries, ylab="Original series", xlab="", col="red")
grid()
LambdaOpt <- BoxCox.lambda(tSeries)
plot(BoxCox(tSeries, LambdaOpt), ylab="Transformed series", xlab="", col="red")
title(main=toString(round(LambdaOpt, 3)))
grid()
fit.auto <- auto.arima(tSeries, lambda=LambdaOpt, biasadj=T)
fit.auto
res.auto <- residuals(fit.auto)
plot(res.auto)
res.auto <- res.auto[-c(1:12)]
tsdisplay(res.auto)
p <- rep(0, 1, frequency(tSeries)*3)
for (i in 1:length(p)){
p[i] <- Box.test(res.auto, lag=i, type = "Ljung-Box")$p.value
}
plot(p, xlab="Lag", ylab="p-values", ylim=c(0,1), main="Ljung-Box test")
abline(h = 0.05, lty = 2, col = "blue")
fitShort <- Arima(trainSeries, order=c(1,1,1), seasonal=c(1,1,2), lambda=LambdaOpt, biasadj = T)
fc       <- forecast(fitShort, h=D)
accuracy(fc, testSeries)
plot(forecast(fitShort, h=D), ylab=xname, xlab="Time")
lines(tSeries, col="red")
plot(diff(BoxCox(tSeries, LambdaOpt), 12), type="l", col="red")
grid()
plot(diff(diff(BoxCox(tSeries, LambdaOpt), 12), 1), type="l", col="red")
grid()
par(mfrow=c(1,2))
acf(diff(diff(BoxCox(tSeries, LambdaOpt), 12), 1), lag.max=5*12, main="")
pacf(diff(diff(BoxCox(tSeries, LambdaOpt), 12), 1), lag.max=5*12, main="")
fit <- auto.arima(tSeries, d=1, D=1, max.p=10, max.q=11, max.P = 4, max.Q = 4,
start.p=2, start.q=1, start.P=2, start.Q=1,
lambda=LambdaOpt, biasadj=T)
fit
res <- residuals(fit)
plot(res)
res <- res[-c(1:12)]
tsdisplay(res)
p <- rep(0, 1, frequency(tSeries)*3)
for (i in 1:length(p)){
p[i] <- Box.test(res, lag=i, type = "Ljung-Box")$p.value
}
plot(p, xlab="Lag", ylab="p-values", ylim=c(0,1), main="Ljung-Box test")
abline(h = 0.05, lty = 2, col = "blue")
par(mfrow=c(1,2))
qqnorm(res)
qqline(res, col="red")
hist(res)
fitShort <- Arima(trainSeries, order=c(3,1,0), seasonal=c(3,1,1), lambda=LambdaOpt, biasadj = T)
fc       <- forecast(fitShort, h=D)
accuracy(fc, testSeries)
plot(forecast(fitShort, h=D), ylab=xname, xlab="Year")
lines(tSeries, col="red")
fitShort <- Arima(trainSeries, order=c(2,1,1), seasonal=c(0,1,1), lambda=LambdaOpt, biasadj = T)
fc       <- forecast(fitShort, h=D)
accuracy(fc, testSeries)
plot(forecast(fitShort, h=D), ylab=xname, xlab="Year")
lines(tSeries, col="red")
res      <- residuals(fit, type = "response")[-c(1:12)]
res.auto <- residuals(fit.auto, type = "response")[-c(1:12)]
plot(res, res.auto, xlim=c(min(res, res.auto), max(res, res.auto)), ylim=c(min(res, res.auto), max(res, res.auto)),
xlab = "Residuals of manually found model", ylab="Residuals of auto.arima model")
grid()
lines(c(min(res, res.auto), max(res, res.auto))*2, c(min(res, res.auto), max(res, res.auto))*2, col="red")
dm.test(res, res.auto)
res.ets <- residuals(fit.ets, type = "response")[-c(1:12)]
plot(res, res.ets,
xlab="Residuals, best ARIMA",
ylab="Residuals, best ETS",
xlim=c(min(c(res, res.ets), na.rm=T), max(c(res, res.ets), na.rm=T)),
ylim=c(min(c(res, res.ets), na.rm=T), max(c(res, res.ets), na.rm=T)))
lines(c(min(c(res, res.ets), na.rm=T), max(c(res, res.ets), na.rm=T)), c(min(c(res, res.ets), na.rm=T), max(c(res, res.ets), na.rm=T)), col="red")
dm.test(res, res.ets)
dm.test(res, res.ets, alternative = "less")
fl <- forecast(fit, h=D)
print(fl)
plot(fl, ylab=xname, xlab="Year", col="red")
