```print('Hello World')
```print("Hello World")
knitr::opts_chunk$set(echo = TRUE)
```print("Hello World")
```print("Hello World", quote = FALSE)
summary(cars)
```{r pressure, echo=FALSE}
```{r cars}
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```{r cars}
summary(cars)
summary(cars)
```{r pressure, echo=FALSE}
plot(pressure)
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
```print("Hello world!")
```print("Hello world!")
```print("Hello world!")
```print("Hello world!")
```print("Hello world!")
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
```print("Hello world!")
install .packages('swirl')
install .packages('swirl')
install.packages('swirl')
library(swirl)
swirl()
12
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
z, 555, z
c(z, 555, z)
z*2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div = z/my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2 + 1000
my_div
getwd()
ls()
x<-9
ls()
dir()
?dir
args(dir)
info(dir)
args(list.files)
os.getwd()
getwd()
old.rid <- getwd()
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
play()
nxt()
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create("testdir2")
dir.create(file.path("testdir2","testdir3"),recursive=TRUE)
setwd()
setwd(old.dir)
1:20
pi:10
15:1
?:
?`::`
?':'
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect<1
tf
num_vect>=6
my_char <- c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Temirlan")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep=" ")
1:3
paste(1:3. c("X","Y","Z"),sep='')
paste(1:3, c("X","Y","Z"),sep='')
LETTERS
paste(LETTERS, 1:4, sep = "-")
x<- c(44, NA, 5, NA)
x*3
y<- rnorm(1000)
z<-rep(NA, 1000)
my_data <- sample(c(y,z), 100)
is.na(my_data)
my_na <-is.na(my_data)
my_na
my_data == NA
sum(my_na)
print(my_data)
my_data
0/0
inf-inf
INF-INF
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2<- c(11,2,NA)
names(vect2)<- c("foo","bar",'norf')
identical(vect, vect2)
vect['bar']
vect[c('foo','bar')]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(data=1:20,nrow=4, ncol=5 )
identical(my_matrix, my_matrix2)
patients <- c("Bill", 'Gina', 'Kelly', 'Sean')
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c('patient', 'age', 'weight', 'bp', 'rating', 'test')
colnames(my_data)<- cnames
my_data
TRUE == TRUE
(FASE == TRUE) == FAlse
(FASE == TRUE) == FALSE
(FALSE == TRUE) == FALSE
6 == 7
6<7
10<=10
5 != 7
5 != 7
5 == 7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins, 'twins'')
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
submit()
boring_function("My first function!")
boring_function()
boring_function
submit(
)
my_mean(c(4,5,10))
submit()
remained(5)
remainder(5)
remainder(11,5)
remainder(divisor = 11,num = 5)
remainder(4, div=2)
args(remainder)
submit()
evaluate(stdev)
stder
stdev
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[-1]}, c(8,4,0))
evaluate(function(x){x[-0]}, c(8,4,0))
evaluate(function(x){x[-1]}, c(8,4,0))
?paste
paste('Programming','is','fun!')
submit()
telegram('kek cheburek')
submit
submit()
madlibs('car','good','dog')
mad_libs('car','good','dog')
submit()
"I"%p%"love"%p%"R!"
head(flags)
dim(flags)
class(flags)
binom.test(11, 12, p = 0.1, alternative = "greater")
setwd('C:\\Users\\Temirlan\\Desktop\\HarbourSpace\\Module6 SDA\\ass4')
data<-read.csv('Electric_Production.csv')
head(data)
data
library(forecast)
library(forecast)
library(tseries)
install.packages('tseries')
install.packages("tseries")
library(tseries)
library(lmtest)
library(Hmisc)
data <- read.csv("monthly-wage.csv", sep=",", stringsAsFactors=F)
data <- read.csv("Electric_Production.csv", sep=",", stringsAsFactors=F)
data
names(data)[1] <- "Date"
names(data)[2] <- "Value"
xname <- "Monthly electricity production"
data$Value <- as.numeric(data$Value)
data$Date <- as.Date(as.yearmon(data$Date, format="%Y-%m"))
data
data <- read.csv("Electric_Production.csv", sep=",", stringsAsFactors=F)
data
names(data)[1] <- "Date"
names(data)[2] <- "Value"
data
as.Date(as.character("11/1/1985"), format = "%d")
as.Date(as.character("11/1/1985"), format = "%d")
as.Date(as.character("11/1/1985"), format = "%Y/%m")
as.Date(as.character("11/1/1985"), format = "%YYYY/%m")
as.Date(as.character("11/1/1985"), format = "%YYYY/%mm")
as.Date(as.character("11/1/1985"), format = "%mm/%dd/%yyyy")
as.Date(as.character("11/1/1985"), format = "%mm/%dd/%YYYY")
as.Date(as.character("11/1/1985"), format = "%m/%d/%Y")
as.Date(as.character("11/1/1985"), format = "%m/%Y")
as.Date(as.character("11/1/1985"), format = "%m/%d/%Y")
format(as.Date(as.character("11/1/1985"), format = "%m/%d/%Y"), "%m-%Y")
format(as.Date(as.character(data$Date), format = "%m/%d/%Y"), "%m-%Y")
data$Date <- format(as.Date(as.character(data$Date), format = "%m/%d/%Y"), "%m-%Y")
data
tSeries <- ts(data = data$Value, start = as.numeric(c(format(data$Date[1], "%Y"), format(data$Date[1], "%m"))), freq = 12)
?ts
format(data$Date[1], "%Y")
data$Date[1]
as.numeric(c(format(data$Date[1], "%Y"), format(data$Date[1], "%m")))
?format
data <- read.csv("Electric_Production.csv", sep=",", stringsAsFactors=F)
names(data)[1] <- "Date"
names(data)[2] <- "Value"
xname <- "Monthly electricity production"
data$Value <- as.numeric(data$Value)
data$Date <- as.Date(as.character(data$Date), format = "%m/%d/%Y")
tSeries <- ts(data = data$Value, start = as.numeric(c(format(data$Date[1], "%Y"), format(data$Date[1], "%m"))), freq = 12)
plot(tSeries, type="l", ylab=xname, col="red")
plot(stl(tSeries, s.window="periodic"))
par(mfrow=c(2,1))
plot(tSeries, ylab="Original series", xlab="", col="red")
grid()
par(mfrow=c(2,1))
plot(tSeries, ylab="Original series", xlab="", col="red")
grid()
par(mfrow=c(2,1))
plot(tSeries, ylab="Original series", xlab="", col="red")
grid()
LambdaOpt <- BoxCox.lambda(tSeries)
??BoxCox.lambda
library(forecast)
par(mfrow=c(2,1))
plot(tSeries, ylab="Original series", xlab="", col="red")
grid()
LambdaOpt <- BoxCox.lambda(tSeries)
plot(BoxCox(tSeries, LambdaOpt), ylab="Transformed series", xlab="", col="red")
title(main=toString(round(LambdaOpt, 3)))
grid()
??BoxCox.lambda
par(mfrow=c(2,1))
plot(tSeries, ylab="Original series", xlab="", col="red")
grid()
LambdaOpt <- BoxCox.lambda(tSeries)
plot(BoxCox(tSeries, LambdaOpt), ylab="Transformed series", xlab="", col="red")
title(main=toString(round(LambdaOpt, 3)))
grid()
fit.auto <- auto.arima(tSeries, lambda=LambdaOpt, biasadj=T)
fit.auto <- auto.arima(tSeries, lambda=LambdaOpt, biasadj=T)
fit.auto
par(mfrow=c(2,1))
plot(tSeries, ylab="Original series", xlab="", col="red")
grid()
LambdaOpt <- BoxCox.lambda(tSeries)
plot(BoxCox(tSeries, LambdaOpt), ylab="Transformed series", xlab="", col="red")
title(main=toString(round(LambdaOpt, 3)))
grid()
fit.auto <- auto.arima(tSeries, lambda=LambdaOpt, biasadj=T)
fit.auto
res.auto <- residuals(fit.auto)
plot(res.auto)
res.auto <- res.auto[-c(1:12)]
tsdisplay(res.auto)
p <- rep(0, 1, frequency(tSeries)*3)
for (i in 1:length(p)){
p[i] <- Box.test(res.auto, lag=i, type = "Ljung-Box")$p.value
}
plot(p, xlab="Lag", ylab="p-values", ylim=c(0,1), main="Ljung-Box test")
abline(h = 0.05, lty = 2, col = "blue")
par(mfrow=c(1,2))
qqnorm(res.auto)
qqline(res.auto, col="red")
hist(res.auto)
plot(diff(BoxCox(tSeries, LambdaOpt), 12), type="l", col="red")
grid()
plot(diff(diff(BoxCox(tSeries, LambdaOpt), 12), 1), type="l", col="red")
grid()
par(mfrow=c(1,2))
acf(diff(diff(BoxCox(tSeries, LambdaOpt), 12), 1), lag.max=5*12, main="")
pacf(diff(diff(BoxCox(tSeries, LambdaOpt), 12), 1), lag.max=5*12, main="")
fit <- auto.arima(tSeries, d=1, D=1, max.p=10, max.q=11, max.P = 4, max.Q = 4,
start.p=2, start.q=1, start.P=2, start.Q=1,
lambda=LambdaOpt, biasadj=T)
fit
res <- residuals(fit)
plot(res)
res <- res[-c(1:12)]
tsdisplay(res)
p <- rep(0, 1, frequency(tSeries)*3)
for (i in 1:length(p)){
p[i] <- Box.test(res, lag=i, type = "Ljung-Box")$p.value
}
plot(p, xlab="Lag", ylab="p-values", ylim=c(0,1), main="Ljung-Box test")
abline(h = 0.05, lty = 2, col = "blue")
par(mfrow=c(1,2))
qqnorm(res)
qqline(res, col="red")
hist(res)
res_manual_orig_scale <- residuals(fit, type = "response")[-c(1:12)]
res_auto_orig_scale <- residuals(fit.auto, type = "response")[-c(1:12)]
ax_range <- range(c(res_manual_orig_scale, res_auto_orig_scale))
plot(res_manual_orig_scale, res_auto_orig_scale, xlim=ax_range, ylim=ax_range,
xlab = "Residuals of manually found model", ylab="Residuals of auto.arima model")
grid()
lines(c(ax_range[1], ax_range[2])*2, c(ax_range[1], ax_range[2])*2, col="red")
fl <- forecast(fit, h=D)
fl <- forecast(fit, h=D, bootstrap=TRUE)
fl <- forecast(fit, h=D, bootstrap=TRUE)
D
D<-
data
D<-
data
data
D<-39
fl <- forecast(fit, h=D, bootstrap=TRUE)
print(fl)
plot(fl, ylab=xname, xlab="Year", col="red")
fit <- auto.arima(tSeries, d=1, D=1, max.p=10, max.q=11, max.P = 4, max.Q = 4,
start.p=2, start.q=1, start.P=2, start.Q=1,
lambda=LambdaOpt, biasadj=T)
fit
res <- residuals(fit)
plot(res)
res <- res[-c(1:12)]
tsdisplay(res)
p <- rep(0, 1, frequency(tSeries)*3)
for (i in 1:length(p)){
p[i] <- Box.test(res, lag=i, type = "Ljung-Box")$p.value
}
plot(p, xlab="Lag", ylab="p-values", ylim=c(0,1), main="Ljung-Box test")
abline(h = 0.05, lty = 2, col = "blue")
fl <- forecast(fit, h=D)
print(fl)
plot(fl, ylab=xname, xlab="Year", col="red")
library(forecast)
library(tseries)
library(lmtest)
library(Hmisc)
setwd('C:\\Users\\Temirlan\\Desktop\\HarbourSpace\\Module6 SDA\\ass4')
data <- read.csv("Electric_Production.csv", sep=",", stringsAsFactors=F)
names(data)[1] <- "Date"
names(data)[2] <- "Value"
xname <- "Monthly electricity production"
data$Value <- as.numeric(data$Value)
data$Date <- as.Date(as.character(data$Date), format = "%m/%d/%Y")
tSeries <- ts(data = data$Value, start = as.numeric(c(format(data$Date[1], "%Y"), format(data$Date[1], "%m"))), freq = 12)
plot(tSeries, type="l", ylab=xname, col="red")
grid()
D<-39
plot(stl(tSeries, s.window="periodic"))
par(mfrow=c(2,1))
plot(tSeries, ylab="Original series", xlab="", col="red")
grid()
LambdaOpt <- BoxCox.lambda(tSeries)
plot(BoxCox(tSeries, LambdaOpt), ylab="Transformed series", xlab="", col="red")
title(main=toString(round(LambdaOpt, 3)))
grid()
fit.auto <- auto.arima(tSeries, lambda=LambdaOpt, biasadj=T)
fit.auto
res.auto <- residuals(fit.auto)
plot(res.auto)
res.auto <- res.auto[-c(1:12)]
tsdisplay(res.auto)
p <- rep(0, 1, frequency(tSeries)*3)
for (i in 1:length(p)){
p[i] <- Box.test(res.auto, lag=i, type = "Ljung-Box")$p.value
}
plot(p, xlab="Lag", ylab="p-values", ylim=c(0,1), main="Ljung-Box test")
abline(h = 0.05, lty = 2, col = "blue")
par(mfrow=c(1,2))
qqnorm(res.auto)
qqline(res.auto, col="red")
hist(res.auto)
plot(diff(BoxCox(tSeries, LambdaOpt), 12), type="l", col="red")
grid()
plot(diff(diff(BoxCox(tSeries, LambdaOpt), 12), 1), type="l", col="red")
grid()
par(mfrow=c(1,2))
acf(diff(diff(BoxCox(tSeries, LambdaOpt), 12), 1), lag.max=5*12, main="")
pacf(diff(diff(BoxCox(tSeries, LambdaOpt), 12), 1), lag.max=5*12, main="")
fit <- auto.arima(tSeries, d=1, D=1, max.p=10, max.q=11, max.P = 4, max.Q = 4,
start.p=2, start.q=1, start.P=2, start.Q=1,
lambda=LambdaOpt, biasadj=T)
fit
res <- residuals(fit)
plot(res)
res <- res[-c(1:12)]
tsdisplay(res)
p <- rep(0, 1, frequency(tSeries)*3)
for (i in 1:length(p)){
p[i] <- Box.test(res, lag=i, type = "Ljung-Box")$p.value
}
plot(p, xlab="Lag", ylab="p-values", ylim=c(0,1), main="Ljung-Box test")
abline(h = 0.05, lty = 2, col = "blue")
par(mfrow=c(1,2))
qqnorm(res)
qqline(res, col="red")
hist(res)
res_manual_orig_scale <- residuals(fit, type = "response")[-c(1:12)]
res_auto_orig_scale <- residuals(fit.auto, type = "response")[-c(1:12)]
ax_range <- range(c(res_manual_orig_scale, res_auto_orig_scale))
plot(res_manual_orig_scale, res_auto_orig_scale, xlim=ax_range, ylim=ax_range,
xlab = "Residuals of manually found model", ylab="Residuals of auto.arima model")
grid()
lines(c(ax_range[1], ax_range[2])*2, c(ax_range[1], ax_range[2])*2, col="red")
fl <- forecast(fit, h=D)
print(fl)
plot(fl, ylab=xname, xlab="Year", col="red")
