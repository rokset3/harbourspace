}
plot(p, xlab="Lag", ylab="p-values", ylim=c(0,1), main="Ljung-Box test")
abline(h = 0.05, lty = 2, col = "blue")
#Download the library from github, add your personal token by calling "GITHUB_PAT = your_token" in usethis::edit_r_environ()
#devtools::install_github("FinYang/tsdl")
#usethis::create_github_token()
#usethis::edit_r_environ()
#devtools::install_github("FinYang/tsdl")
library(tsdl)
library(forecast)
library(tseries)
library(lmtest)
library(Hmisc)
library(lubridate)
library(zoo)
setwd('C:\\Users\\Temirlan\\Desktop\\HarbourSpace\\Module6 SDA\\ass Anier/') #Change directory
tSeries<-subset(tsdl, description = "Montly av. residential gas usage Iowa")[[1]]
data <- data.frame(date=as.Date(as.yearmon(time(tSeries))), Y=as.matrix(tSeries))
names(data)[1] <- "Date"
names(data)[2] <- "Value"
data$Date <-as.Date(as.character(data$Date), format = "%Y-%m-%d")
data$Value <- as.numeric(data$Value)
xname <- "Montly av. residential gas usage Iowa"
plot(tSeries, type="l", ylab=xname, col="red")
grid()
D<-round(length(tSeries)/10) #11 here
trainSeries <- window(tSeries, end  =c(year(data$Date[length(data$Date)-D]),  month(data$Date[length(data$Date)-D])))
testSeries  <- window(tSeries, start=c(year(data$Date[length(data$Date)-D+1]),month(data$Date[length(data$Date)-D+1])))
plot(stl(tSeries, s.window="periodic"))
par(mfrow=c(2,1))
plot(tSeries, ylab="Original series", xlab="", col="red")
grid()
LambdaOpt <- BoxCox.lambda(tSeries)
plot(BoxCox(tSeries, LambdaOpt), ylab="Transformed series", xlab="", col="red")
title(main=toString(round(LambdaOpt, 3)))
grid()
fit.ets <- ets(tSeries, lambda=LambdaOpt, biasadj = T)
print(fit.ets)
tsdisplay(residuals(fit.ets))
p <- rep(0, 1, frequency(tSeries)*3)
for (i in 1:length(p)){
p[i] <- Box.test(residuals(fit.ets), lag=i, type = "Ljung-Box")$p.value
}
plot(p, xlab="Lag", ylab="p-values", ylim=c(0,1), main="Ljung-Box test")
abline(h = 0.05, lty = 2, col = "blue")
```{r, echo=F, warning=F, message=F}
#Download the library from github, add your personal token by calling "GITHUB_PAT = your_token" in usethis::edit_r_environ()
#devtools::install_github("FinYang/tsdl")
#usethis::create_github_token()
#usethis::edit_r_environ()
#devtools::install_github("FinYang/tsdl")
library(tsdl)
library(forecast)
library(tseries)
library(lmtest)
library(Hmisc)
library(lubridate)
library(zoo)
setwd('C:\\Users\\Temirlan\\Desktop\\HarbourSpace\\Module6 SDA\\ass Anier/') #Change directory
tSeries<-subset(tsdl, description = "Montly av. residential gas usage Iowa")[[1]]
data <- data.frame(date=as.Date(as.yearmon(time(tSeries))), Y=as.matrix(tSeries))
names(data)[1] <- "Date"
names(data)[2] <- "Value"
data$Date <-as.Date(as.character(data$Date), format = "%Y-%m-%d")
data$Value <- as.numeric(data$Value)
xname <- "Montly av. residential gas usage Iowa"
plot(tSeries, type="l", ylab=xname, col="red")
grid()
D<-round(length(tSeries)/10) #11 here
trainSeries <- window(tSeries, end  =c(year(data$Date[length(data$Date)-D]),  month(data$Date[length(data$Date)-D])))
testSeries  <- window(tSeries, start=c(year(data$Date[length(data$Date)-D+1]),month(data$Date[length(data$Date)-D+1])))
plot(stl(tSeries, s.window="periodic"))
par(mfrow=c(2,1))
plot(tSeries, ylab="Original series", xlab="", col="red")
grid()
LambdaOpt <- BoxCox.lambda(tSeries)
plot(BoxCox(tSeries, LambdaOpt), ylab="Transformed series", xlab="", col="red")
title(main=toString(round(LambdaOpt, 3)))
grid()
fit.ets <- ets(tSeries, lambda=LambdaOpt, biasadj = T)
print(fit.ets)
tsdisplay(residuals(fit.ets))
par(mfrow=c(1,2))
qqnorm(residuals(fit.ets))
qqline(residuals(fit.ets), col="red")
hist(residuals(fit.ets))
shapiro.test(residuals(fit.ets))$p.value
wilcox.test(residuals(fit.ets))$p.value
kpss.test(residuals(fit.ets))$p.value
fitShort <- ets(trainSeries, model="AAA", damped=F, lambda=LambdaOpt, biasadj = T)
fc       <- forecast(fitShort, h=D)
accuracy(fc, testSeries)
plot(forecast(fitShort, h=D), ylab=xname, xlab="Year")
lines(tSeries, col="red")
fit.auto <- auto.arima(tSeries, lambda=LambdaOpt, biasadj=T)
fit.auto
res.auto <- residuals(fit.auto)
plot(res.auto)
res.auto <- res.auto[-c(1:12)]
tsdisplay(res.auto)
p <- rep(0, 1, frequency(tSeries)*3)
for (i in 1:length(p)){
p[i] <- Box.test(res.auto, lag=i, type = "Ljung-Box")$p.value
}
plot(p, xlab="Lag", ylab="p-values", ylim=c(0,1), main="Ljung-Box test")
abline(h = 0.05, lty = 2, col = "blue")
par(mfrow=c(1,2))
qqnorm(res.auto)
qqline(res.auto, col="red")
hist(res.auto)
shapiro.test(res.auto)$p.value
wilcox.test(res.auto)$p.value
kpss.test(res.auto)$p.value
fitShort <- Arima(trainSeries, order=c(1,1,1), seasonal=c(1,1,2), lambda=LambdaOpt, biasadj = T)
fc       <- forecast(fitShort, h=D)
accuracy(fc, testSeries)
plot(forecast(fitShort, h=D), ylab=xname, xlab="Time")
lines(tSeries, col="red")
kpss.test(BoxCox(tSeries, LambdaOpt))$p.value
par(mfrow=c(1,2))
acf((BoxCox(tSeries, LambdaOpt), lag.max=5*12, main="")
pacf(tSeries, LambdaOpt), lag.max=5*12, main="")
par(mfrow=c(1,2))
acf((BoxCox(tSeries, LambdaOpt), lag.max=5*12, main=""))
par(mfrow=c(1,2))
acf(BoxCox(tSeries, LambdaOpt), lag.max=5*12, main="")
pacf(tSeries, LambdaOpt), lag.max=5*12, main="")
par(mfrow=c(1,2))
acf(BoxCox(tSeries, LambdaOpt), lag.max=5*12, main="")
pacf(BoxCox(tSeries, LambdaOpt), lag.max=5*12, main="")
fit <- auto.arima(tSeries, d=0, D=0, max.p=38, max.q=11, max.P = 1, max.Q = 5,
start.p=2, start.q=1, start.P=0, start.Q=1,
lambda=LambdaOpt, biasadj=T)
fit
res <- residuals(fit)
plot(res)
res <- res[-c(1:12)]
tsdisplay(res)
p <- rep(0, 1, frequency(tSeries)*3)
for (i in 1:length(p)){
p[i] <- Box.test(res, lag=i, type = "Ljung-Box")$p.value
}
plot(p, xlab="Lag", ylab="p-values", ylim=c(0,1), main="Ljung-Box test")
abline(h = 0.05, lty = 2, col = "blue")
par(mfrow=c(1,2))
qqnorm(res)
qqline(res, col="red")
hist(res)
shapiro.test(res)$p.value
wilcox.test(res)$p.value
kpss.test(res)$p.value
fitShort <- Arima(trainSeries, order=c(2,1,1), seasonal=c(0,1,1), lambda=LambdaOpt, biasadj = T)
fc       <- forecast(fitShort, h=D)
accuracy(fc, testSeries)
plot(forecast(fitShort, h=D), ylab=xname, xlab="Year")
lines(tSeries, col="red")
res      <- residuals(fit, type = "response")[-c(1:12)]
res.auto <- residuals(fit.auto, type = "response")[-c(1:12)]
plot(res, res.auto, xlim=c(min(res, res.auto), max(res, res.auto)), ylim=c(min(res, res.auto), max(res, res.auto)),
xlab = "Residuals of manually found model", ylab="Residuals of auto.arima model")
grid()
lines(c(min(res, res.auto), max(res, res.auto))*2, c(min(res, res.auto), max(res, res.auto))*2, col="red")
dm.test(res, res.auto)
res.ets <- residuals(fit.ets, type = "response")[-c(1:12)]
plot(res, res.ets,
xlab="Residuals, best ARIMA",
ylab="Residuals, best ETS",
xlim=c(min(c(res.auto, res.ets), na.rm=T), max(c(res.auto, res.ets), na.rm=T)),
ylim=c(min(c(res.auto, res.ets), na.rm=T), max(c(res.auto, res.ets), na.rm=T)))
lines(c(min(c(res.auto, res.ets), na.rm=T), max(c(res.auto, res.ets), na.rm=T)), c(min(c(res.auto, res.ets), na.rm=T), max(c(res.auto, res.ets), na.rm=T)), col="red")
dm.test(res, res.ets)
dm.test(res, res.ets, alternative = "less")
dm.test(res.auto, res.ets)
dm.test(res.auto, res.ets, alternative = "less")
dm.test(res.auto, res.ets)
dm.test(res.auto, res.ets, alternative = "greater")
dm.test(res.auto, res.ets)
dm.test(res.auto, res, alternative = "greater")
dm.test(res.auto, res.ets)
dm.test(res.auto, res.ets, alternative = "greater")
fl <- forecast(fit.auto, h=D)
print(fl)
plot(fl, ylab=xname, xlab="Year", col="red")
#Download the library from github, add your personal token by calling "GITHUB_PAT = your_token" in usethis::edit_r_environ()
#devtools::install_github("FinYang/tsdl")
#usethis::create_github_token()
#usethis::edit_r_environ()
#devtools::install_github("FinYang/tsdl")
library(tsdl)
library(forecast)
library(tseries)
library(lmtest)
library(Hmisc)
library(lubridate)
library(zoo)
tSeries<-subset(tsdl, description = "Montly av. residential gas usage Iowa")[[1]]
data <- data.frame(date=as.Date(as.yearmon(time(tSeries))), Y=as.matrix(tSeries))
names(data)[1] <- "Date"
names(data)[2] <- "Value"
data$Date <-as.Date(as.character(data$Date), format = "%Y-%m-%d")
data$Value <- as.numeric(data$Value)
xname <- "Montly av. residential gas usage Iowa"
plot(tSeries, type="l", ylab=xname, col="red")
grid()
D<-round(length(tSeries)/10) #11 here
trainSeries <- window(tSeries, end  =c(year(data$Date[length(data$Date)-D]),  month(data$Date[length(data$Date)-D])))
testSeries  <- window(tSeries, start=c(year(data$Date[length(data$Date)-D+1]),month(data$Date[length(data$Date)-D+1])))
plot(stl(tSeries, s.window="periodic"))
par(mfrow=c(2,1))
plot(tSeries, ylab="Original series", xlab="", col="red")
grid()
LambdaOpt <- BoxCox.lambda(tSeries)
plot(BoxCox(tSeries, LambdaOpt), ylab="Transformed series", xlab="", col="red")
title(main=toString(round(LambdaOpt, 3)))
grid()
fit.ets <- ets(tSeries, lambda=LambdaOpt, biasadj = T)
print(fit.ets)
tsdisplay(residuals(fit.ets))
p <- rep(0, 1, frequency(tSeries)*3)
for (i in 1:length(p)){
p[i] <- Box.test(residuals(fit.ets), lag=i, type = "Ljung-Box")$p.value
}
plot(p, xlab="Lag", ylab="p-values", ylim=c(0,1), main="Ljung-Box test")
abline(h = 0.05, lty = 2, col = "blue")
par(mfrow=c(1,2))
qqnorm(residuals(fit.ets))
qqline(residuals(fit.ets), col="red")
hist(residuals(fit.ets))
fitShort <- ets(trainSeries, model="ANA", damped=F, lambda=LambdaOpt, biasadj = T)
fc       <- forecast(fitShort, h=D)
accuracy(fc, testSeries)
plot(forecast(fitShort, h=D), ylab=xname, xlab="Year")
lines(tSeries, col="red")
fitShort <- Arima(trainSeries, order=c(1,0,0), seasonal=c(2,1,1), lambda=LambdaOpt, biasadj = T)
fc       <- forecast(fitShort, h=D)
accuracy(fc, testSeries)
#Download the library from github, add your personal token by calling "GITHUB_PAT = your_token" in usethis::edit_r_environ()
#devtools::install_github("FinYang/tsdl")
#usethis::create_github_token()
#usethis::edit_r_environ()
#devtools::install_github("FinYang/tsdl")
library(tsdl)
library(forecast)
library(tseries)
library(lmtest)
library(Hmisc)
library(lubridate)
library(zoo)
tSeries<-subset(tsdl, description = "Montly av. residential gas usage Iowa")[[1]]
data <- data.frame(date=as.Date(as.yearmon(time(tSeries))), Y=as.matrix(tSeries))
names(data)[1] <- "Date"
names(data)[2] <- "Value"
data$Date <-as.Date(as.character(data$Date), format = "%Y-%m-%d")
data$Value <- as.numeric(data$Value)
xname <- "Montly av. residential gas usage Iowa"
plot(tSeries, type="l", ylab=xname, col="red")
grid()
D<-round(length(tSeries)/10) #11 here
trainSeries <- window(tSeries, end  =c(year(data$Date[length(data$Date)-D]),  month(data$Date[length(data$Date)-D])))
testSeries  <- window(tSeries, start=c(year(data$Date[length(data$Date)-D+1]),month(data$Date[length(data$Date)-D+1])))
plot(stl(tSeries, s.window="periodic"))
par(mfrow=c(2,1))
plot(tSeries, ylab="Original series", xlab="", col="red")
grid()
LambdaOpt <- BoxCox.lambda(tSeries)
plot(BoxCox(tSeries, LambdaOpt), ylab="Transformed series", xlab="", col="red")
title(main=toString(round(LambdaOpt, 3)))
grid()
fit.ets <- ets(tSeries, lambda=LambdaOpt, biasadj = T)
print(fit.ets)
tsdisplay(residuals(fit.ets))
p <- rep(0, 1, frequency(tSeries)*3)
for (i in 1:length(p)){
p[i] <- Box.test(residuals(fit.ets), lag=i, type = "Ljung-Box")$p.value
}
plot(p, xlab="Lag", ylab="p-values", ylim=c(0,1), main="Ljung-Box test")
abline(h = 0.05, lty = 2, col = "blue")
par(mfrow=c(1,2))
qqnorm(residuals(fit.ets))
qqline(residuals(fit.ets), col="red")
hist(residuals(fit.ets))
fitShort <- ets(trainSeries, model="ANA", damped=F, lambda=LambdaOpt, biasadj = T)
fc       <- forecast(fitShort, h=D)
accuracy(fc, testSeries)
plot(forecast(fitShort, h=D), ylab=xname, xlab="Year")
lines(tSeries, col="red")
fit.auto <- auto.arima(tSeries, lambda=LambdaOpt, biasadj=T)
fit.auto
res.auto <- residuals(fit.auto)
plot(res.auto)
res.auto <- res.auto[-c(1:12)]
tsdisplay(res.auto)
p <- rep(0, 1, frequency(tSeries)*3)
for (i in 1:length(p)){
p[i] <- Box.test(res.auto, lag=i, type = "Ljung-Box")$p.value
}
plot(p, xlab="Lag", ylab="p-values", ylim=c(0,1), main="Ljung-Box test")
abline(h = 0.05, lty = 2, col = "blue")
par(mfrow=c(1,2))
qqnorm(res.auto)
qqline(res.auto, col="red")
hist(res.auto)
fitShort <- Arima(trainSeries, order=c(1,0,0), seasonal=c(2,1,1), lambda=LambdaOpt, biasadj = T)
fc       <- forecast(fitShort, h=D)
accuracy(fc, testSeries)
plot(forecast(fitShort, h=D), ylab=xname, xlab="Time")
lines(tSeries, col="red")
?Arima
fitShort <- Arima(trainSeries, order=c(1,0,0), seasonal=c(2,1,1), lambda=LambdaOpt, biasadj = T, include.drift = T)
fc       <- forecast(fitShort, h=D)
accuracy(fc, testSeries)
?Arima
plot(forecast(fitShort, h=D), ylab=xname, xlab="Time")
lines(tSeries, col="red")
plot(diff(BoxCox(tSeries, LambdaOpt), 12), type="l", col="red")
grid()
kpss.test(diff(BoxCox(tSeries, LambdaOpt), 12))$p.value
grid
grid()
plot(diff(BoxCox(tSeries, LambdaOpt), 12), type="l", col="red")
grid()
par(mfrow=c(1,2))
acf(diff(BoxCox(tSeries, LambdaOpt), 12), lag.max=5*12, main="")
pacf(diff(BoxCox(tSeries, LambdaOpt), 12), lag.max=5*12, main="")
plot(diff(diff(BoxCox(tSeries, LambdaOpt), 12), 1), type="l", col="red")
grid()
par(mfrow=c(1,2))
acf(diff(diff(BoxCox(tSeries, LambdaOpt), 12), 1), lag.max=5*12, main="")
pacf(diff(diff(BoxCox(tSeries, LambdaOpt), 12), 1), lag.max=5*12, main="")
fit <- auto.arima(tSeries, d=1, D=1, max.p=8, max.q=2, max.P = 3, max.Q = 2,
start.p=1, start.q=0, start.P=0, start.Q=0,
lambda=LambdaOpt, biasadj=T)
fit
fit <- auto.arima(tSeries, d=1, D=1, max.p=8, max.q=2, max.P = 3, max.Q = 2,
start.p=1, start.q=0, start.P=0, start.Q=0,
lambda=LambdaOpt, biasadj=T, allowdrift = T)
fit
fit <- auto.arima(tSeries, d=1, D=1, max.p=8, max.q=2, max.P = 3, max.Q = 2,
start.p=1, start.q=0, start.P=0, start.Q=0,
lambda=LambdaOpt, biasadj=T)
fit
res <- residuals(fit)
plot(res)
res <- res[-c(1:12)]
tsdisplay(res)
p <- rep(0, 1, frequency(tSeries)*3)
for (i in 1:length(p)){
p[i] <- Box.test(res, lag=i, type = "Ljung-Box")$p.value
}
plot(p, xlab="Lag", ylab="p-values", ylim=c(0,1), main="Ljung-Box test")
abline(h = 0.05, lty = 2, col = "blue")
par(mfrow=c(1,2))
qqnorm(res)
qqline(res, col="red")
hist(res)
shapiro.test(res)$p.value
wilcox.test(res)$p.value
kpss.test(res)$p.value
fitShort <- Arima(trainSeries, order=c(2,1,0), seasonal=c(2,1,0), lambda=LambdaOpt, biasadj = T)
fc       <- forecast(fitShort, h=D)
accuracy(fc, testSeries)
fit <- auto.arima(tSeries, d=1, D=1, max.p=8, max.q=2, max.P = 3, max.Q = 2,
start.p=1, start.q=0, start.P=0, start.Q=0,
lambda=LambdaOpt, biasadj=T, include.drift = T)
fit <- auto.arima(tSeries, d=1, D=1, max.p=8, max.q=2, max.P = 3, max.Q = 2,
start.p=1, start.q=0, start.P=0, start.Q=0,
lambda=LambdaOpt, biasadj=T,)
fit
?auto.arima
fit <- auto.arima(tSeries, d=1, D=1, max.p=8, max.q=2, max.P = 3, max.Q = 2,
start.p=1, start.q=0, start.P=0, start.Q=0,
lambda=LambdaOpt, biasadj=T, allowdrift = F)
?auto.arima
fit
fit <- auto.arima(tSeries, d=1, D=1, max.p=8, max.q=2, max.P = 3, max.Q = 2,
start.p=1, start.q=0, start.P=0, start.Q=0,
lambda=LambdaOpt, biasadj=T, )
fit
fit <- auto.arima(tSeries, d=1, D=1, max.p=8, max.q=2, max.P = 3, max.Q = 2,
start.p=1, start.q=0, start.P=0, start.Q=0,
lambda=LambdaOpt, biasadj=T)
fit
fitShort <- Arima(trainSeries, order=c(2,1,0), seasonal=c(2,1,0), lambda=LambdaOpt, biasadj = T)
fc       <- forecast(fitShort, h=D)
accuracy(fc, testSeries)
res      <- residuals(fit, type = "response")[-c(1:12)]
res.auto <- residuals(fit.auto, type = "response")[-c(1:12)]
plot(res, res.auto, xlim=c(min(res, res.auto), max(res, res.auto)), ylim=c(min(res, res.auto), max(res, res.auto)),
xlab = "Residuals of manually found model", ylab="Residuals of auto.arima model")
grid()
lines(c(min(res, res.auto), max(res, res.auto))*2, c(min(res, res.auto), max(res, res.auto))*2, col="red")
#Download the library from github, add your personal token by calling "GITHUB_PAT = your_token" in usethis::edit_r_environ()
#devtools::install_github("FinYang/tsdl")
#usethis::create_github_token()
#usethis::edit_r_environ()
#devtools::install_github("FinYang/tsdl")
library(tsdl)
library(forecast)
library(tseries)
library(lmtest)
library(Hmisc)
library(lubridate)
library(zoo)
tSeries<-subset(tsdl, description = "Montly av. residential gas usage Iowa")[[1]]
data <- data.frame(date=as.Date(as.yearmon(time(tSeries))), Y=as.matrix(tSeries))
names(data)[1] <- "Date"
names(data)[2] <- "Value"
data$Date <-as.Date(as.character(data$Date), format = "%Y-%m-%d")
data$Value <- as.numeric(data$Value)
xname <- "Montly av. residential gas usage Iowa"
plot(tSeries, type="l", ylab=xname, col="red")
grid()
D<-round(length(tSeries)/10) #11 here
trainSeries <- window(tSeries, end  =c(year(data$Date[length(data$Date)-D]),  month(data$Date[length(data$Date)-D])))
testSeries  <- window(tSeries, start=c(year(data$Date[length(data$Date)-D+1]),month(data$Date[length(data$Date)-D+1])))
plot(stl(tSeries, s.window="periodic"))
par(mfrow=c(2,1))
plot(tSeries, ylab="Original series", xlab="", col="red")
grid()
LambdaOpt <- BoxCox.lambda(tSeries)
plot(BoxCox(tSeries, LambdaOpt), ylab="Transformed series", xlab="", col="red")
title(main=toString(round(LambdaOpt, 3)))
grid()
fit.ets <- ets(tSeries, lambda=LambdaOpt, biasadj = T)
print(fit.ets)
tsdisplay(residuals(fit.ets))
p <- rep(0, 1, frequency(tSeries)*3)
for (i in 1:length(p)){
p[i] <- Box.test(residuals(fit.ets), lag=i, type = "Ljung-Box")$p.value
}
plot(p, xlab="Lag", ylab="p-values", ylim=c(0,1), main="Ljung-Box test")
abline(h = 0.05, lty = 2, col = "blue")
par(mfrow=c(1,2))
qqnorm(residuals(fit.ets))
qqline(residuals(fit.ets), col="red")
hist(residuals(fit.ets))
fitShort <- ets(trainSeries, model="ANA", damped=F, lambda=LambdaOpt, biasadj = T)
fc       <- forecast(fitShort, h=D)
accuracy(fc, testSeries)
plot(forecast(fitShort, h=D), ylab=xname, xlab="Year")
lines(tSeries, col="red")
fit.auto <- auto.arima(tSeries, lambda=LambdaOpt, biasadj=T)
fit.auto
res.auto <- residuals(fit.auto)
plot(res.auto)
res.auto <- res.auto[-c(1:12)]
tsdisplay(res.auto)
p <- rep(0, 1, frequency(tSeries)*3)
for (i in 1:length(p)){
p[i] <- Box.test(res.auto, lag=i, type = "Ljung-Box")$p.value
}
plot(p, xlab="Lag", ylab="p-values", ylim=c(0,1), main="Ljung-Box test")
abline(h = 0.05, lty = 2, col = "blue")
par(mfrow=c(1,2))
qqnorm(res.auto)
qqline(res.auto, col="red")
hist(res.auto)
fitShort <- Arima(trainSeries, order=c(1,0,0), seasonal=c(2,1,1), lambda=LambdaOpt, biasadj = T, include.drift = T)
fc       <- forecast(fitShort, h=D)
accuracy(fc, testSeries)
?Arima
plot(forecast(fitShort, h=D), ylab=xname, xlab="Time")
lines(tSeries, col="red")
plot(diff(BoxCox(tSeries, LambdaOpt), 12), type="l", col="red")
grid()
plot(diff(diff(BoxCox(tSeries, LambdaOpt), 12), 1), type="l", col="red")
grid()
par(mfrow=c(1,2))
acf(diff(diff(BoxCox(tSeries, LambdaOpt), 12), 1), lag.max=5*12, main="")
pacf(diff(diff(BoxCox(tSeries, LambdaOpt), 12), 1), lag.max=5*12, main="")
fit <- auto.arima(tSeries, d=1, D=1, max.p=8, max.q=2, max.P = 3, max.Q = 2,
start.p=1, start.q=0, start.P=0, start.Q=0,
lambda=LambdaOpt, biasadj=T)
fit
res <- residuals(fit)
plot(res)
res <- res[-c(1:12)]
tsdisplay(res)
p <- rep(0, 1, frequency(tSeries)*3)
for (i in 1:length(p)){
p[i] <- Box.test(res, lag=i, type = "Ljung-Box")$p.value
}
plot(p, xlab="Lag", ylab="p-values", ylim=c(0,1), main="Ljung-Box test")
abline(h = 0.05, lty = 2, col = "blue")
par(mfrow=c(1,2))
qqnorm(res)
qqline(res, col="red")
hist(res)
fitShort <- Arima(trainSeries, order=c(2,1,0), seasonal=c(2,1,0), lambda=LambdaOpt, biasadj = T)
fc       <- forecast(fitShort, h=D)
accuracy(fc, testSeries)
plot(forecast(fitShort, h=D), ylab=xname, xlab="Year")
lines(tSeries, col="red")
res      <- residuals(fit, type = "response")[-c(1:12)]
res.auto <- residuals(fit.auto, type = "response")[-c(1:12)]
plot(res, res.auto, xlim=c(min(res, res.auto), max(res, res.auto)), ylim=c(min(res, res.auto), max(res, res.auto)),
xlab = "Residuals of manually found model", ylab="Residuals of auto.arima model")
grid()
lines(c(min(res, res.auto), max(res, res.auto))*2, c(min(res, res.auto), max(res, res.auto))*2, col="red")
dm.test(res, res.auto)
res.ets <- residuals(fit.ets, type = "response")[-c(1:12)]
plot(res, res.ets,
xlab="Residuals, best ARIMA",
ylab="Residuals, best ETS",
xlim=c(min(c(res.auto, res.ets), na.rm=T), max(c(res.auto, res.ets), na.rm=T)),
ylim=c(min(c(res.auto, res.ets), na.rm=T), max(c(res.auto, res.ets), na.rm=T)))
lines(c(min(c(res.auto, res.ets), na.rm=T), max(c(res.auto, res.ets), na.rm=T)), c(min(c(res.auto, res.ets), na.rm=T), max(c(res.auto, res.ets), na.rm=T)), col="red")
dm.test(res.auto, res.ets)
dm.test(res.auto, res.ets, alternative = "greater")
fl <- forecast(fit.auto, h=D)
print(fl)
plot(fl, ylab=xname, xlab="Year", col="red")
