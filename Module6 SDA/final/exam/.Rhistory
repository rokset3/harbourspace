---
title: "Exam_solution"
#3
For 61 big cities in England and Wales we know the average annual mortality rates (per 100000 people) and concentration of calcium in drinking water. Cities are classified as either northern or southern (water.txt)
#4
Test whether southern and northern cities have the same average water hardness, input the p-value and name of the test.
task_1<-read.txt('water.txt')
setwd('C:\\Users\\Temirlan\\Desktop\\HarbourSpace\\Module6 SDA\\exam')
task_1<-read.txt('water.txt')
setwd('C:\\Users\\Temirlan\\Desktop\\HarbourSpace\\Module6 SDA\\exam')
setwd('C:\\Users\\Temirlan\\Desktop\\HarbourSpace\\Module6 SDA\\final\\exam')
task_1<-read.txt('water.txt')
task_1<-read.csv('water.txt')
task_1
task_1<-read.csv('water.txt', sep = '\t')
task_1
t.test(task_1$mortality)
mortality_ci <-t.test(task_1$mortality)$conf.int
mortality_ci
task_1
library(ggplot2)
geom_histogram(data=task_1$hardness)
ggplot(task_1, aes(x=hardness))+
geom_histogram()
task_1
library(dplyr)
task_1
filter(task_1, location=='South')
south_countries <- filter(task_1, location=='South')$mortality
north_countries <- filter(task_1, location=='North')$mortality
north_countries
south_countries <- filter(task_1, location=='South')$hardness
north_countries <- filter(task_1, location=='North')$hardness
south_countries
ggplot(south_countries, aes(x=hardness))+
geom_histogram()
ggplot(task_1, aes(x=hardness))+
geom_histogram()
task_1
south_countries <- filter(task_1, location=='South')$hardness
north_countries <- filter(task_1, location=='North')$hardness
t.test(x=c(south_countries, north_countries))
south_countries
geom_histogram(south_countries)
ggplot(south_countries)+
geom_histogram()
hist(south_countries)
hist(north_countries)
wilcox.test.test(x=c(south_countries, north_countries))
wilcox.test(x=c(south_countries, north_countries))
?wilcox.test
wilcox.test(x=c(south_countries, north_countries))
wilcox.test(x=c(south_countries, north_countries), paired=False)
wilcox.test(x=c(south_countries, north_countries), paired=F)
wilcox.test(x=c(south_countries, north_countries), paired=F)
?prop.test
prop.test(x=c(104, 189),
n=c(num_asp,num_placebo))
num_asp<-11037
num_placebo<-11034
prop.test(x=c(104, 189),
n=c(num_asp,num_placebo))
wilcox.test(c(22, 22, 15, 13, 19, 19, 18, 20, 21, 13, 13, 15),
c(17, 18, 18, 15, 12, 4, 14, 15, 10))
?wilcox.test
??perm.test
library(jmuOutlier)
perm.test(c(22, 22, 15, 13, 19, 19, 18, 20, 21, 13, 13, 15),
c(17, 18, 18, 15, 12, 4, 14, 15, 10))
task_2<-read.csv('challenger.txt')
task_2
task_2<-read.csv('challenger.txt', sep = '\t')
task_2
?prop.table
?boot
library(boot)
?boot
bootstrap_data<-boot(task_2)
bootstrap_data<-boot(task_2)
bootstrap_data<-boot(task_2, R = 100000)
bootstrap_data<-boot(task_2,function(u,i) mean(u[i]), R = 100000)
task_3 <-read.csv('illiteracy.txt')
task_3
task_3 <-read.csv('illiteracy.txt', sep="\t")
task_3
library("ggpubr")
install.packages("ggpubr")
library(ggpubr)
task_3 <-read.csv('illiteracy.txt', sep="\t")
task_3
?cor
cor(task_3$Illit, task_3$Births, method="spearman")
task_1
lm(task_1$mortality ~ task_1$hardness)
?LinRegTTEST
??LinRegTTEST
lm(task_1$mortality ~ task_1$hardness)
?lm
summary(m1)
m1<-lm(task_1$mortality ~ task_1$hardness)
summary(m1)
prop.test(x=c(203,239),
n=c(718,515))
cor(task_1$mortality, task_1$hardness, method = "pearson")
corelation<- cor(task_1$mortality, task_1$hardness, method = "pearson")
n<-length(task_1)
n
task_1
n<-length(task_1$hardness)
statistic <- corelation * sqrt(n-2)/sqrt(1-corelation**2)
statistic
?pt
2*pt(statistic, n-2, lower.tail = F)
2*pt(statistic, n-2, lower.tail = F)
statistic
2*pt(statistic, n-2, lower.tail = F)
2*pt(statistic, n-2)
data_matrix <- matrix(c(197, 111, 33, 382, 685, 331, 110, 342, 333),
nrow = 3, ncol = 3,
dimnames = list(c("Not too happy", "Quite happy", "Very happy"),
c("Not satisfied", "More or less satisfied", "Satisfied")))
task_4 <- as.data.frame(data_matrix)
task_4
library(Hmisc)
library(vcdExtra)
GKgamma(task_4)
task_5 <- read.csv("blanket.txt")
task_5
task_5 <- read.csv("blanket.txt", sep="\t")
task_5
library(PMCMRplus)
install.packages('PMCMRplus')
install.packages('PMCMRplus')
library(PMCMRplus)
library(PMCMRplus)
?frdAllPairsNemenyiTest
task_5
filter(task_5, Blanket=="b0")
filter(task_5, Blanket=="b0")$Recovery.time
frdAllPairsNemenyiTest(task_5)
task_5 <- read.csv("blanket.txt", sep="\t")
p<-data.frame(pair=c("0-1","0-2","0-3","1-2","1-3","2-3"),
raw=rep(NA, 6))
task_5
b0<-filter(task_5, Blanket=='b0')$Recovery.time
b0<-filter(task_5, Blanket=='b0')$Recovery.time
b1<-filter(task_5, Blanket=='b1')$Recovery.time
b2<-filter(task_5, Blanket=='b2')$Recovery.time
b3<-filter(task_5, Blanket=='b3')$Recovery.time
p$raw[1] <- wilcox.test(b0, b1)$p.value
p$raw[1] <- perm.test(b0, b1)$p.value
task_5 <- read.csv("blanket.txt", sep="\t")
p<-data.frame(pair=c("0-1","0-2","0-3","1-2","1-3","2-3"),
raw=rep(NA, 6))
b0<-filter(task_5, Blanket=='b0')$Recovery.time
b1<-filter(task_5, Blanket=='b1')$Recovery.time
b2<-filter(task_5, Blanket=='b2')$Recovery.time
b3<-filter(task_5, Blanket=='b3')$Recovery.time
p$raw[1] <- perm.test(b0, b1)$p.value
p$raw[2] <- perm.test(b0, b2)$p.value
p$raw[3] <- perm.test(b0, b3)$p.value
p$raw[3] <- perm.test(b0, b3)$p.value
p$raw[4] <- perm.test(b1, b2)$p.value
p$raw[5] <- perm.test(b1, b3)$p.value
p$raw[6] <- perm.test(b2, b3)$p.value
p$bonferroni <- p.adjust(p$raw, "bonferroni")
p$holm       <- p.adjust(p$raw, "holm")
p$BH         <- p.adjust(p$raw, "BH")
p$BY         <- p.adjust(p$raw, "BY")
p
task_5
task_5 <- read.csv("blanket.txt", sep="\t")
p<-data.frame(pair=c("0-1","0-2","0-3"),
raw=rep(NA, 3))
task_5
b0<-filter(task_5, Blanket=='b0')$Recovery.time
b1<-filter(task_5, Blanket=='b1')$Recovery.time
b2<-filter(task_5, Blanket=='b2')$Recovery.time
b3<-filter(task_5, Blanket=='b3')$Recovery.time
p$raw[1] <- perm.test(b0, b1)$p.value
p$raw[2] <- perm.test(b0, b2)$p.value
p$raw[3] <- perm.test(b0, b3)$p.value
p$raw[3] <- perm.test(b0, b3)$p.value
p$bonferroni <- p.adjust(p$raw, "bonferroni")
p$holm       <- p.adjust(p$raw, "holm")
p$BH         <- p.adjust(p$raw, "BH")
p$BY         <- p.adjust(p$raw, "BY")
p
perm.test(b0, b2)
mean(b0)-mean(b2)
mean(b0)-mean(b1)
mean(b0)-mean(b3)
mean(b0)
mean(b1)
mean(b2)
mean(b3)
mean(b2)
task_5
p
mean(b0) - mean(b2)
perm.test(b0, b2)
t.test(b0, b2)
library(forecast)
install.packages("forecast")
install.packages("forecast")
library(forecast)
milk <- read.csv("milk.csv", header = TRUE)
milk
milk <- read.csv("milk.csv")
milk
milk <- read.csv("milk.csv", sep="..")
milk <- read.csv("milk.csv", sep=".")
milk
milk <- read.csv("milk.csv",)
milk <- read.csv("milk.csv",)
milk
milk_ts <- ts(milk, start = c(1962, 1), frequency = 12)
milk_arima <- auto.arima(milk_ts)
milk_arima
milk <- read.csv("milk.csv",)
milk
milk_ts <- ts(milk, start = c(1962, 1), frequency = 12)
milk_ts
milk_arima <- auto.arima(milk_ts)
milk <- read.csv("milk.csv", header = TRUE)
milk_ts <- ts(milk$milk_production, start = c(1962, 1), frequency = 12)
milk
milk[,1]
milk[,2]
milk_ts <- ts(milk[,2], start = c(1962, 1), frequency = 12)
milk_arima <- auto.arima(milk_ts)
milk_arima
# Load the data
milk <- read.csv("milk.csv", header = TRUE)
# Convert the data to a time series
milk_ts <- ts(milk$milk_production, start = c(1962, 1), frequency = 12)
# Fit the ETS model using ets()
milk_ets <- ets(milk_ts)
# Print the selected model
milk_ets
